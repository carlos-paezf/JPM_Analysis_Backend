using BackendJPMAnalysis.DTO;
using BackendJPMAnalysis.Helpers;
using BackendJPMAnalysis.Models;
using BackendJPMAnalysis.Services;
using Microsoft.AspNetCore.Mvc;

namespace BackendJPMAnalysis.Controllers
{
    [ApiController]
    [Route("userCircularization", Name = "UserCircularization")]
    [Produces("application/json")]
    public class UserCircularizationController : ControllerBase
    {
        private readonly JPMDatabaseContext _context;

        private readonly ILogger<UserCircularizationController> _logger;

        private readonly IErrorHandlingService _errorHandlingService;

        private readonly UserCircularizationService _service;

        public UserCircularizationController(
            JPMDatabaseContext context,
            ILogger<UserCircularizationController> logger,
            UserCircularizationService service,
            ErrorHandlingService errorHandlingService
        )
        {
            _context = context;
            _logger = logger;
            _service = service;
            _errorHandlingService = errorHandlingService;
        }



        /// <summary>
        /// This C# function handles assigning departments to company users via an HTTP PATCH request.
        /// </summary>
        /// <param name="body">The `AssignDepartmentToCompanyUsers` method is an HTTP PATCH endpoint
        /// that takes in a list of `UserDepartmentAssignmentDTO` objects in the request body. The
        /// method then calls the `_service.AssignDepartmentToCompanyUsers` method to assign departments
        /// to company users based on the provided data.</param>
        /// <returns>
        /// The method is returning a `NoContent` result if the department assignment to company users
        /// is successful. If an exception occurs during the process, the method will return the result
        /// of handling the exception using the `_errorHandlingService.HandleExceptionAsync` method.
        /// </returns>
        [HttpPatch("assign-department-to-company-users", Name = "AssignDepartmentToCompanyUser")]
        public async Task<ActionResult> AssignDepartmentToCompanyUsers([FromBody] List<UserDepartmentAssignmentDTO> body)
        {
            try
            {
                await _service.AssignDepartmentToCompanyUsers(body);

                return NoContent();
            }
            catch (Exception ex)
            {
                return await _errorHandlingService.HandleExceptionAsync(
                    ex: ex, logger: _logger,
                    className: nameof(UserCircularizationController), methodName: nameof(AssignDepartmentToCompanyUsers)
                );
            }
        }


        /// <summary>
        /// The function "GenerateUserCircularization" sends a GET request to generate user
        /// circularization data and handles any exceptions that occur.
        /// </summary>
        /// <returns>
        /// The `GenerateUserCircularization` method is returning an `ActionResult` which will contain
        /// the response generated by the `_service.GenerateUserCircularization()` method. If the
        /// generation is successful, it will return an `Ok` response with the generated data. If an
        /// exception occurs during the generation process, the exception will be caught and handled by
        /// `_errorHandlingService.HandleExceptionAsync` method, which will log
        /// </returns>
        [HttpGet("generate-user-circularization", Name = "GenerateUserCircularization")]
        public async Task<ActionResult> GenerateUserCircularization()
        {
            try
            {
                var response = await _service.GenerateUserCircularization();

                return Ok(response);
            }
            catch (Exception ex)
            {
                return await _errorHandlingService.HandleExceptionAsync(
                    ex: ex, logger: _logger,
                    className: nameof(UserCircularizationController), methodName: nameof(GenerateUserCircularization)
                );
            }
        }
    }
}